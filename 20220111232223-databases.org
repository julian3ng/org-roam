:PROPERTIES:
:ID:       d4ef8812-0a00-4dde-a166-60eca07388f2
:END:
#+title: Databases
* Databases
  A database is a [[id:90175857-4f5f-4020-b5e6-5a8d7145b4cf][Model]] of some structure of reality - personal user
  information, book titles at a library, and network data from a router are all
  such examples. It is a collection of related data representing some aspect of
  the real world, also known as a *miniworld* or *universe of discourse*. Not to
  be confused with a [[id:cad38ac1-3d65-44ef-87f5-e73670a6bb4b][Data Model]].

  Using a database standardizes the data and labels used across multiple
  applications sharing it, reduces development time that would normally be used
  for working out file formats, provides a flexible storage format that can
  change when needed, makes data immediately available to many users
  simultaneously, and remove redundancy in data, increasing consistency.

  There are certain [[id:49e9e046-6d2b-4c7f-819a-f1bafcade0e6][Tradeoffs Between Databases and Ad Hoc Storage]].

  One instance of a concrete database architecture is the [[id:7b1a88e4-32dd-4fa7-93b6-2ebe67a4a59f][ANSI/SPARC 3-Level DB]]
  Above that layer, the database may also take part in a [[id:8916e342-e264-47ad-8c46-aa4bb3ab01ec][Client/Server
  Architecture]]. In the SQL server case: a GUI or CLI client would send commands
  via Open DB Connectivity (which converts commands to SQL) or via raw SQL
  commands to the daatabase server. This is known as a two tier
  architecture. This could further be separated into an application server,
  which interfaces with the client and the database server.

** Types of database
   There are many types of databases, from unstructured NoSQL databases to the
   classical relational database. CS6400 focuses on the relational model, where
   the database table is the primary data structure. Traditional databases have
   text and numeric data. A *deductive database system* has rules to
   automatically assign complex properties to entities.  Relatedly, *triggers*
   are sets of instructions (*stored procedures*) that happen on certain
   database events, like storing a row, which are used in *active database
   systems*.

   Other models include document-based, graph-based, column-based, hierarchical,
   and key-value models, which yield various database types like NOSQL and
   native XML databases.

   We can also divide by other qualities - databases can be centralized or
   distributed (and federated), open source or commmercial, and general or
   specific (think TSDBs for time series or Online Transaction Processing
   systems for high transaction throughput).
   
** Database features
   The database uses keys and IDs to speed up queries by providing a sort order.
   IDs are used in *surrogate-based representation* to uniquely identify a
   row. Contrast this with *name-based representation*, where the row properties
   themselves identify a row. This can cause issues where some properties change,
   leading to questions about which object the row refers to.

   Integrity, whether or not the database reflects reality well; and consistency,
   whether or not the database is internally consistent; are both desirable
   properties in a database, aside from speed. *Referential integrity* requires
   that all =x= relate to some =y=, and a *uniqueness constraint* requires that
   all elements of a set be different. These two examples must be present in the
   miniworld the database models for it to make sense.

   The database should have ways to load data, backup data, reorganize data
   storage, and monitor performance, among other things.



